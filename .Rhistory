here('data', 'tab_serie_gmt_1999-2021.csv'),
#'data/tab_serie_gmt_1999-2021.csv',
header = TRUE,
sep = ';',
dec=',',
)
library('here') # Pastas
# Imports
library(lubridate) # Date
library(dplyr) # Tables
library(forecast)
library('here') # Pastas
```{r}
# Checa pasta de trabalho
print(getwd())
# Lê Tabela ----
df <- read.csv(
here('data', 'tab_serie_gmt_1999-2021.csv'),
#'data/tab_serie_gmt_1999-2021.csv',
header = TRUE,
sep = ';',
dec=',',
)
# Lê Tabela ----
df <- read.csv(
here('data', 'tab_serie_gmt_1999-2021.csv'),
#'data/tab_serie_gmt_1999-2021.csv',
header = TRUE,
sep = ';',
dec=',',
)
head(df)
# Checa pasta de trabalho
print(getwd())
# Lê Tabela ----
df <- read.csv(
here('data', 'tab_serie_gmt_1999-2021.csv'),
#'data/tab_serie_gmt_1999-2021.csv',
header = TRUE,
sep = ';',
dec=',',
)
# Lê Tabela ----
df <- read.csv(
here('data', 'tab_serie_gmt_1999-2021.csv'),
#'data/tab_serie_gmt_1999-2021.csv',
header = TRUE,
sep = ';',
dec=',',
)
# Results
head(df)
# Ajusta os dtypes
df$data_hora_gmt <- as.Date(df$data_hora_gmt, format='%Y-%m-%d %H:%M:%S')
df$data_hora_sp <- as.Date(df$data_hora_sp, format='%Y-%m-%d %H:%M:%S')
# Extraí parte da data
df$ano <- lubridate::year(df$data_hora_sp)
# Extraí parte da data
df$ano <- lubridate::year(df$data_hora_sp)
df$mes <- lubridate::month(df$data_hora_sp)
df$dia <- lubridate::day(df$data_hora_sp)
# Vê os dtypes
sapply(df, class)
sapply(df, typeof)
str(df)
# Print head
print.data.frame(head(df, 3))
# Lista de Satélites
list_sats <- unique(df$satelite)
list_sats[1]
# Extraí Satélite
df <- subset(df, satelite == 'AQUA_M-T')
df
# Agrupa Dataframe ----
df_sat <- df %>%
dplyr::group_by(ano, mes) %>%
dplyr::summarise(n_focos = n())
View(df_sat)
# Cria coluna com Data
df_sat$date <- zoo::as.yearmon(paste(df_sat$ano, df_sat$mes), '%Y %m')
# Deleta Mês e Ano
df_sat$ano <- NULL
df_sat$mes <- NULL
df_sat
# Vê os dtypes
sapply(df_sat, class)
sapply(df_sat, typeof)
# Reorder columns
df_sat <- df_sat[,c(2, 1)]
colnames(df_sat)
# Print head
print.data.frame(head(df_sat, 3))
print.data.frame(tail(df_sat, 3))
# Definição da série
serie <- ts(df_sat$n_focos, start = c(2002,7), end = c(2021, 9), frequency = 12)
serie
# Gráficos
forecast::autoplot(serie)
plot.ts(serie, main = 'Nº de Focos de Calor')
# Explorando
acf(serie) # autocorrelação
pacf(serie) # autocorrelação parcial
ggtsdisplay(serie) # avaliação em visualização única
diff(serie) # diferença entre os meses
seasonplot(
serie,
col=rainbow(12),
year.labels=TRUE,
type='o',
pch=16
)
# variações sazonais e aleatórias parecem ser constante ao longo do texto
plot.ts(serie) # dados originais, picos no verão e no inverno
serie_components <- decompose(serie) # estimando os componentes
# variações sazonais e aleatórias parecem ser constante ao longo do texto
plot.ts(serie) # dados originais, picos no verão e no inverno
serie_components <- decompose(serie) # estimando os componentes
serie_components$seasonal # obter os valores estimados do componentes sazonal
plot(serie_components)
# É uma série estacionária
tseries::adf.test(serie)
tseries::adf.test(serie, k = 12)
## Etapa 1: N Diff
n_dif <- ndiffs(serie) # diferença entre os meses
n_dif
#serie_ndiff <- diff(serie, n_dif)
serie_ndiff <- serie
ggtsdisplay(serie_ndiff) # avaliação em visualização única
## Etapa 1: N Diff
n_dif <- ndiffs(serie) # diferença entre os meses
n_dif
serie_ndiff <- diff(serie, n_dif)
#serie_ndiff <- diff(serie, n_dif)
serie_ndiff <- serie
ggtsdisplay(serie_ndiff) # avaliação em visualização única
## Etapa 2: Box-Cox -----
lbd <- BoxCox.lambda(serie_ndiff)
lbd
serie_ndiff_bc <- BoxCox(serie_ndiff, lambda = lbd)
hist(serie_ndiff_bc) # antes
autoplot(serie_ndiff_bc)
ggtsdisplay(serie_ndiff_bc)
# Previsão
serie_ndiff_bc_forecast <- forecast(serie_ndiff_bc, h = 48)
# Previsão
serie_ndiff_bc_forecast <- forecast(serie_ndiff_bc, h = 48)
plot(serie_ndiff_bc_forecast)
library('lubridate') # Date
library('dplyr') # Tables
library('forecast')
library('here') # Pastas
library('lubridate') # Date
library('dplyr') # Tables
library('forecast')
library('here') # Pastas
# Dados
Posteriormente faz-se a leitura/carregamento dos dados.
Fiz usando o *data.frame*, porém uma alternativa interessante é utilizar objetos do tipo *tibble*, conforme o prof. Fabiano Guasti sugere.
```{r}
# Lê Tabela ----
df <- read.csv(
here(here('data', 'tab_serie_gmt_1999-2021.csv')),
#'data/tab_serie_gmt_1999-2021.csv',
header = TRUE,
sep = ';',
dec=',',
)
# Results
head(df)
# Ajusta os dtypes
df$data_hora_gmt <- as.Date(df$data_hora_gmt, format='%Y-%m-%d %H:%M:%S')
# Extraí parte da data
df$ano <- lubridate::year(df$data_hora_sp)
# Vê os dtypes
sapply(df, class)
sapply(df, typeof)
str(df)
# Print head
print.data.frame(head(df, 3))
# Print head
print.data.frame(head(df, 3))
<br>
## Seleciona *Subset* por Satélite
Uma vez com a tabela ajustada, com as correções dos *dtypes*, é possível extrair as séries de apena sum satélite.
# Print head
print.data.frame(head(df, 3))
# Lista de Satélites
list_sats <- unique(df$satelite)
list_sats[1]
# Extraí Satélite
df <- subset(df, satelite == 'AQUA_M-T')
df
# Agrupa Dataframe ----
df_sat <- df %>%
dplyr::group_by(ano, mes) %>%
dplyr::summarise(n_focos = n())
# Agrupa Dataframe ----
df_sat <- df %>%
dplyr::group_by(ano, mes) %>%
dplyr::summarise(n_focos = n())
# Agrupa Dataframe ----
df_sat <- df %>%
dplyr::group_by(ano, mes) %>%
dplyr::summarise(n_focos = n(), .groups = 'drop')
# Agrupa Dataframe
df_sat <- df %>%
dplyr::group_by(ano, mes) %>%
dplyr::summarise(n_focos = n(), .groups = 'drop')
---
title: "Focos de Calor"
output: html_notebook
---
O presente script é parte dos estudos para entrega do TCC do PECEGE.
O objetivo é comparar séries históricas.
Inicialmente importa-se os *packages* que serão necessários para a análise
```{r}
library('lubridate') # Date
library('dplyr') # Tables
library('forecast')
library('here') # Pastas
library('lubridate') # Date
library('dplyr') # Tables
library('forecast')
library('here') # Pastas
# Dados
Posteriormente faz-se a leitura/carregamento dos dados.
Fiz usando o *data.frame*, porém uma alternativa interessante é utilizar objetos do tipo *tibble*, conforme o prof. Fabiano Guasti sugere.
```{r}
# Lê Tabela ----
df <- read.csv(
here(here('data', 'tab_serie_gmt_1999-2021.csv')),
#'data/tab_serie_gmt_1999-2021.csv',
header = TRUE,
sep = ';',
dec=',',
)
<br>
## Seleciona *Subset* por Satélite
Uma vez com a tabela ajustada, com as correções dos *dtypes*, é possível extrair as séries de apena sum satélite.
# Extraí Satélite
df <- subset(df, satelite == 'AQUA_M-T')
df
<br>
# Faz acúmulo pra Dados Mensal
```{r}
# Agrupa Dataframe
df_sat <- df %>%
dplyr::group_by(ano, mes) %>%
dplyr::summarise(n_focos = n())
df
# Agrupa Dataframe
df_sat <- df %>%
dplyr::group_by(ano, mes) %>%
dplyr::summarise(n_focos = n())
# Agrupa Dataframe ----
df_sat <- df %>%
dplyr::group_by(ano, mes) %>%
dplyr::summarise(n_focos = n())
# Agrupa Dataframe ----
df_sat <- df %>%
dplyr::group_by(ano, mes) %>%
dplyr::summarise(n_focos = sum(n))
#
df.columns
#
str(df)
# Lê Tabela ----
df <- read.csv(
here(here('data', 'tab_serie_gmt_1999-2021.csv')),
header = TRUE,
sep = ';',
dec=',',
)
# Results
head(df)
# Ajusta os dtypes
df$data_hora_gmt <- as.Date(df$data_hora_gmt, format='%Y-%m-%d %H:%M:%S')
# Extraí parte da data
df$ano <- lubridate::year(df$data_hora_sp)
df$dia <- lubridate::day(df$data_hora_sp)
# Vê os dtypes
sapply(df, class)
sapply(df, typeof)
str(df)
# Print head
print.data.frame(head(df, 3))
# Lista de Satélites
list_sats <- unique(df$satelite)
list_sats[1]
# Extraí Satélite
df <- subset(df, satelite == 'AQUA_M-T')
df
#
str(df)
# Agrupa Dataframe ----
df_sat <- df %>%
dplyr::group_by(ano, mes) %>%
dplyr::summarise(n_focos = sum(n))
# Agrupa Dataframe ----
df_sat <- df %>%
dplyr::group_by(ano, mes) %>%
dplyr::summarise(n_focos = n())
# Cria coluna com Data
df_sat$date <- zoo::as.yearmon(paste(df_sat$ano, df_sat$mes), '%Y %m')
df_sat
# Agrupa Dataframe ----
df_sat <- df %>%
dplyr::group_by(ano, mes) %>%
dplyr::summarise(n_focos = n())
df$mes <- lubridate::month(df$data_hora_sp)
df$dia <- lubridate::day(df$data_hora_sp)
# Vê os dtypes
sapply(df, class)
sapply(df, typeof)
str(df)
# Lista de Satélites
list_sats <- unique(df$satelite)
list_sats[1]
# Extraí Satélite
df <- subset(df, satelite == 'AQUA_M-T')
df
#
str(df)
df_sat
# Agrupa Dataframe ----
df_sat <- df %>%
dplyr::group_by(ano, mes) %>%
dplyr::summarise(n_focos = n())
# Agrupa Dataframe ----
df_sat <- df %>%
dplyr::group_by(ano, mes) %>%
dplyr::summarise(n_focos = n(), .groups = 'drop')
# Cria coluna com Data
df_sat$date <- zoo::as.yearmon(paste(df_sat$ano, df_sat$mes), '%Y %m')
# Deleta Mês e Ano
df_sat$ano <- NULL
df_sat$mes <- NULL
df_sat
# Agrupa Dataframe ----
df_sat <- df %>%
dplyr::group_by(ano, mes) %>%
dplyr::summarise(n_focos = n(), .groups = 'drop')
# Cria coluna com Data
df_sat$date <- zoo::as.yearmon(paste(df_sat$ano, df_sat$mes), '%Y %m')
# Deleta Mês e Ano
df_sat$ano <- NULL
df_sat$mes <- NULL
df_sat
# Vê os dtypes
sapply(df_sat, class)
sapply(df_sat, typeof)
# Reorder columns
df_sat <- df_sat[,c(2, 1)]
colnames(df_sat)
# Definição da série
serie <- ts(
df_sat$n_focos,
start = c(2002,7),
end = c(2021, 9),
frequency = 12
)
serie
# Gráficos
forecast::autoplot(serie)
plot.ts(serie, main = 'Nº de Focos de Calor')
acf(serie) # autocorrelação
pacf(serie) # autocorrelação parcial
ggtsdisplay(serie) # avaliação em visualização única
diff(serie) # diferença entre os meses
diff(serie) # diferença entre os meses
seasonplot(
serie,
col=rainbow(12),
year.labels=TRUE,
type='o',
pch=16
)
## Etapa 1: N Diff
n_dif <- ndiffs(serie) # diferença entre os meses
n_dif
#serie_ndiff <- diff(serie, n_dif)
serie_ndiff <- serie
serie_ndiff <- diff(serie, n_dif)
#serie_ndiff <- diff(serie, n_dif)
serie_ndiff <- serie
ggtsdisplay(serie_ndiff) # avaliação em visualização única
tseries::adf.test(serie)
tseries::adf.test(serie, k = 12)
tseries::adf.test(serie)
tseries::adf.test(serie, k = 12)
tseries::adf.test(serie)
tseries::adf.test(serie, k = 12)
teste_pack2=ur.df(serie)
library('urca') # Unit Root (Raiz Unitária)
teste_pack2=ur.df(serie)
teste_pack2
summary(teste_pack2)
library('urca') # Unit Root (Raiz Unitária)
teste_pack2=ur.df(serie)
teste_pack2
summary(teste_pack2)
tseries::adf.test(serie)
tseries::adf.test(serie, k = 12)
library('urca') # Unit Root (Raiz Unitária)
teste_pack2=ur.df(serie)
teste_pack2
summary(teste_pack2)
tseries::adf.test(serie)
tseries::adf.test(serie, k = 12)
library('urca') # Unit Root (Raiz Unitária)
teste_pack2=ur.df(serie)
teste_pack2
summary(teste_pack2)
testeKPSS_ar=ur.kpss(serie)
summary(testeKPSS)
testeKPSS_ar=ur.kpss(serie)
summary(testeKPSS)
testeKPSS_ar
summary(testeKPSS)
testeKPSS_ar
summary(testeKPSS_ar)
n_dif <- ndiffs(serie) # diferença entre os meses
n_dif
#serie_ndiff <- diff(serie, n_dif)
serie_ndiff <- serie
# Calcula diferença entre os meses
n_dif <- ndiffs(serie)
n_dif
#serie_ndiff <- diff(serie, n_dif)
serie_ndiff <- serie
ggtsdisplay(serie_ndiff) # avaliação em visualização única
auto.arima(serie)
auto.arima(serie)
#
auto.arima(serie)
#
auto.arima(serie)
#
lbd <- BoxCox.lambda(serie_ndiff)
lbd
#
serie_ndiff_bc <- BoxCox(serie_ndiff, lambda = lbd)
hist(serie_ndiff_bc) # antes
autoplot(serie_ndiff_bc)
ggtsdisplay(serie_ndiff_bc)
auto.arima(serie)
auto.arima(serie_ndiff_bc)
serie_ndiff_bc
checkresiduals(serie)
checkresiduals(serie_ndiff_bc)
# Previsão
serie_ndiff_bc_forecast <- forecast(serie_ndiff_bc, h = 96)
# Previsão
serie_ndiff_bc_forecast <- forecast(serie_ndiff_bc, h = 96)
plot(serie_ndiff_bc_forecast)
DF= 12
checkresiduals(serie)
checkresiduals(serie, df=DF)
DF = 12
checkresiduals(serie, df=DF)
checkresiduals(serie_ndiff_bc, df=DF)
DF = 1
checkresiduals(serie, df=DF)
checkresiduals(serie_ndiff_bc, df=DF)
checkresiduals(serie, df=NULL)
checkresiduals(serie_ndiff_bc)
checkresiduals(serie_ndiff_bc, test=TRUE)
checkresiduals(serie_ndiff_bc, test=c('LB'))
auto.arima(serie, trace=T)
auto.arima(serie_ndiff_bc, trace=T)
estima = auto.arima(serie, trace=T)
estima = auto.arima(serie, trace=T)
estima
estima = auto.arima(serie, trace=T)
estima = auto.arima(serie, trace=T)
estima
estima
estima_t = auto.arima(serie_ndiff_bc, trace=T)
estima_t
checkresiduals(estima)
checkresiduals(estima_t)
checkresiduals(estima)
checkresiduals(estima_t)
checkresiduals(estima_t)
checkresiduals(estima)
checkresiduals(estima_t)
estima_t$coef
checkresiduals(estima_t)
ks.test(
estima_t$residuals,
"pnorm",
mean(estima_t$residuals),
sd(estima_t$residuals)
)
ArchTest(estima_t$residuals)
library(MTS)
library('FinTS')
ArchTest(estima_t$residuals)
library('FinTS')
ArchTest(estima_t$residuals)
# Previsão
serie_ndiff_bc_forecast <- forecast::forecast(serie_ndiff_bc, h = 96)
plot(serie_ndiff_bc_forecast)
# Previsão
serie_ndiff_bc_forecast <- forecast::forecast(serie_ndiff_bc, h = 48)
# Previsão
serie_ndiff_bc_forecast <- forecast::forecast(serie_ndiff_bc, h = 48)
plot(serie_ndiff_bc_forecast)
accuracy(
serie_ndiff_bc_forecast,
df_sat$n_focos
)
